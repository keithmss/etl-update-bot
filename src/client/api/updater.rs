// Use code generated by Tonic in `build.rs` from `proto/upate.proto`.
mod update {
    tonic::include_proto!("update");
}

use super::authorization;

use anyhow::Result;
use tonic::{transport::Channel, Request};
use update::updater_client::UpdaterClient;
use update::UpdateRequest;

/// Send a specified server a request to update.
pub(super) async fn run(address: &str, token: &str) -> Result<()> {
    let channel = Channel::builder(address.parse()?).connect().await?;
    let mut client = UpdaterClient::with_interceptor(channel, move |mut request: Request<()>| {
        request = authorization::insert_token(request, token)?;
        Ok(request)
    });
    let request = tonic::Request::new(UpdateRequest {});
    let _ = client.update(request).await?;
    Ok(())
}
